/*
 * _F 0.0.2 - a _F thing
 * Copyright  (c) 2014 J. Harshbarger (MIT Licensed)
 * https://github.com/Hypercubed/_F
 */(function(){function a(a,b){return Object.keys(b).forEach(function(c){a[c]=b[c]}),a}function b(b,f){var g,h=b;return b&&void 0!==b||(h=function(a){return a}),"$index"===b&&(h=function(a,b){return b}),"$this"===b&&(h=function(){return this}),"function"!=typeof h&&(h=function(a){return a[b]}),g="function"==typeof f?function(a,b){return f.call(this,h.apply(this,arguments),b,a)}:h,g.key=b,g.accessor=b?h:void 0,a(g,e),Object.keys(d).forEach(function(a){Object.keys(c).forEach(function(b){g[a][b]=function(){var d=c[b].apply(this,arguments);return e[a].call(this,d)}.bind(g)})}),g}var c={eq:function(a){return b(this.accessor,function(b){return b==a})},lt:function(a){return b(this.accessor,function(b){return a>b})},gt:function(a){return b(this.accessor,function(b){return b>a})}},d={and:function(a,c){return b(this.accessor,function(b,d,e){return!(!a.call(this,e,d)||!c.call(this,e,d))})},or:function(a,c){return b(this.accessor,function(b,d,e){return!(!a.call(this,e,d)&&!c.call(this,e,d))})},not:function(a,c){return b(this.accessor,function(a,b,d){return!c.call(this,d,b)})}},e=a({},c);Object.keys(d).forEach(function(f){e[f]=function(c){return arguments.length<1?a({},e[f]):(c.hasOwnProperty("accessor")&&void 0===c.accessor&&(c=b(this.accessor,c)),d[f](this,c))},Object.keys(c).forEach(function(a){e[f][a]=function(){var b=c[a].apply(this,arguments);return e[f].call(this,b)}})}),"undefined"!=typeof module&&"object"==typeof exports?module.exports=b:"function"==typeof define&&define.amd?define(function(){return b}):this._F=b}).call(function(){return this||("undefined"!=typeof window?window:global)}()),function(){Function.prototype.bind||(Function.prototype.bind=function(a){if("function"!=typeof this)throw new TypeError("Function.prototype.bind - what is trying to be bound is not callable");var b=Array.prototype.slice.call(arguments,1),c=this,d=function(){},e=function(){return c.apply(this instanceof d&&a?this:a,b.concat(Array.prototype.slice.call(arguments)))};return d.prototype=this.prototype,e.prototype=new d,e})}();